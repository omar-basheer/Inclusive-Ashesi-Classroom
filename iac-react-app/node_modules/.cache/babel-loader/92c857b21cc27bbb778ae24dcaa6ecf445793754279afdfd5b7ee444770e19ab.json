{"ast":null,"code":"// export const fakeAuth = () =>\n//     new Promise((resolve) => {\n//         setTimeout(() => {\n//             console.log('Simulating authentication...');\n//             // Replace the next line with actual token retrieval logic\n//             const token = '2342f2f1d131rf12';\n//             // const token = null;\n//             console.log('Authentication successful. Token:', token);\n//             resolve(token);\n//         }, 250);\n//     });\n\nexport const handleLogin = async (e, email, password, login, navigate) => {\n  e.preventDefault();\n  const isValidEmail = email => {\n    // Email regex pattern: firstname.lastname@ashesi.edu.gh\n    const emailRegex = /^[a-zA-Z]+[.][a-zA-Z]+@ashesi\\.edu\\.gh$/;\n    return emailRegex.test(email);\n  };\n  console.log('making api call...');\n  try {\n    const response = await fetch('http://localhost:8080/api/students/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      console.log(\"login request error: login failed\");\n      return;\n    }\n    console.log('retrieviing token...');\n    const data = await response.json();\n    const token = data.token;\n    if (token) {\n      login(token);\n      console.log(token);\n      navigate('/Dashboard');\n    } else {\n      navigate('/Login');\n    }\n  } catch (error) {\n    console.error('An error occurred during login:', error);\n  }\n};\nexport const handleSignUp = async (e, firstName, lastName, email, password, navigate) => {\n  e.preventDefault();\n  try {\n    // Make a POST request to your Django backend signup endpoint\n    const response = await fetch('http://localhost:8080/api/signup/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password\n      })\n    });\n\n    // Assuming the server responds with JSON containing a success property\n    const data = await response.json();\n    if (response.ok && data.success) {\n      // Registration was successful\n      navigate('/Screening');\n    } else {\n      // Display an error message or handle the failure\n      console.error('Registration failed:', data.message);\n    }\n  } catch (error) {\n    console.error('Error during registration:', error.message);\n  }\n};","map":{"version":3,"names":["handleLogin","e","email","password","login","navigate","preventDefault","isValidEmail","emailRegex","test","console","log","response","fetch","method","headers","body","JSON","stringify","ok","data","json","token","error","handleSignUp","firstName","lastName","success","message"],"sources":["/Users/admin/Library/CloudStorage/OneDrive-AshesiUniversity/Ashesi University/ashesi_year_3/sem2/software_engineering/IAC/iac-app/iac-react-app/src/services/user_auth.js"],"sourcesContent":["\n// export const fakeAuth = () =>\n//     new Promise((resolve) => {\n//         setTimeout(() => {\n//             console.log('Simulating authentication...');\n//             // Replace the next line with actual token retrieval logic\n//             const token = '2342f2f1d131rf12';\n//             // const token = null;\n//             console.log('Authentication successful. Token:', token);\n//             resolve(token);\n//         }, 250);\n//     });\n\nexport const handleLogin = async (e, email, password, login, navigate) => {\n    e.preventDefault();\n\n    const isValidEmail = (email) => {\n        // Email regex pattern: firstname.lastname@ashesi.edu.gh\n        const emailRegex = /^[a-zA-Z]+[.][a-zA-Z]+@ashesi\\.edu\\.gh$/;\n        return emailRegex.test(email);\n    }\n\n    console.log('making api call...')\n    try {\n        const response = await fetch('http://localhost:8080/api/students/login/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password }),\n        })\n\n        if (!response.ok) {\n            console.log(\"login request error: login failed\")\n            return\n        }\n        console.log('retrieviing token...')\n        const data = await response.json()\n        const token = data.token\n\n        if (token) {\n            login(token);\n            console.log(token)\n            navigate('/Dashboard');\n        }\n        else {\n            navigate('/Login');\n        }\n    }\n    catch (error) {\n        console.error('An error occurred during login:', error);\n    }\n}\n\nexport const handleSignUp = async (e, firstName, lastName, email, password, navigate) => {\n    e.preventDefault();\n    try {\n        // Make a POST request to your Django backend signup endpoint\n        const response = await fetch('http://localhost:8080/api/signup/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                firstName: firstName,\n                lastName: lastName,\n                email: email,\n                password: password,\n            }),\n        });\n\n        // Assuming the server responds with JSON containing a success property\n        const data = await response.json();\n\n        if (response.ok && data.success) {\n            // Registration was successful\n            navigate('/Screening');\n        } else {\n            // Display an error message or handle the failure\n            console.error('Registration failed:', data.message);\n        }\n    } catch (error) {\n        console.error('Error during registration:', error.message);\n    }\n}\n\n\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAOC,CAAC,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACtEJ,CAAC,CAACK,cAAc,CAAC,CAAC;EAElB,MAAMC,YAAY,GAAIL,KAAK,IAAK;IAC5B;IACA,MAAMM,UAAU,GAAG,yCAAyC;IAC5D,OAAOA,UAAU,CAACC,IAAI,CAACP,KAAK,CAAC;EACjC,CAAC;EAEDQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEhB,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAI,CAACS,QAAQ,CAACO,EAAE,EAAE;MACdT,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD;IACJ;IACAD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,MAAMC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAExB,IAAIA,KAAK,EAAE;MACPlB,KAAK,CAACkB,KAAK,CAAC;MACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;MAClBjB,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,MACI;MACDA,QAAQ,CAAC,QAAQ,CAAC;IACtB;EACJ,CAAC,CACD,OAAOkB,KAAK,EAAE;IACVb,OAAO,CAACa,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOvB,CAAC,EAAEwB,SAAS,EAAEC,QAAQ,EAAExB,KAAK,EAAEC,QAAQ,EAAEE,QAAQ,KAAK;EACrFJ,CAAC,CAACK,cAAc,CAAC,CAAC;EAClB,IAAI;IACA;IACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBO,SAAS,EAAEA,SAAS;QACpBC,QAAQ,EAAEA,QAAQ;QAClBxB,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACd,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,MAAMiB,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAIT,QAAQ,CAACO,EAAE,IAAIC,IAAI,CAACO,OAAO,EAAE;MAC7B;MACAtB,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,MAAM;MACH;MACAK,OAAO,CAACa,KAAK,CAAC,sBAAsB,EAAEH,IAAI,CAACQ,OAAO,CAAC;IACvD;EACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACK,OAAO,CAAC;EAC9D;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}